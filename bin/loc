#!/usr/bin/env python3
###############################################################################%

import os
import sys
import configparser
import argparse
from pathlib import Path

config_dir = Path(os.getenv("XDG_CONFIG_HOME")) / "loc"
config_file = Path(config_dir) / "loc.conf"
return_path_file = config_dir / "return.conf"

parser = argparse.ArgumentParser(
    prog="loc",
    description="Jump to a favorite location. Make it a round trip!",
    argument_default=argparse.SUPPRESS,
    add_help=True
)

parser.add_argument("locnum", nargs="?", type=str, default=".")
parser.add_argument("-l", "--listall", action="store_true", default=False)
parser.add_argument("-b", "--back", action="store_true", default=False)

args = parser.parse_args()


def read_conf():
    global config_file
    with open(config_file) as cf:
        return cf.readlines()


def lookup_path(key):
    conf = read_conf()
    for line in conf:
        if key == line.split(' - ')[0]:
            return line.split(' - ')[1]


def store_current_path():
    current_path = os.getcwd()
    global return_path_file
    with open(return_path_file, "w") as rpf:
        rpf.write(current_path)


def back_to_stored():
    global return_path_file
    with open(return_path_file) as rpf:
        return_path = rpf.read()
    print(return_path)

def list_all():
    print('')
    for line in read_conf():
        sections = line.split(' - ')
        print(f"\033[38;5;87;1m{sections[0]}:\033[38;5;223;1m {sections[1]}\033[0m")


def loc(locnum):
    if locnum in ["1", "2", "3", "4", "5"]:
        target_path = lookup_path(locnum).strip()
        store_current_path()
        print(target_path)

if args.listall:
    list_all()
elif args.back:
    back_to_stored()
else:
    loc(args.locnum)

