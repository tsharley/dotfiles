#!/usr/bin/env bash
#shellcheck disable=SC2317

###############################################################################
#                                                                             #
#   ----------==========  Autoloaded Shell Functions  ==========----------    #
#                                                                             #
#                                                 Copyright Â© 2023 TJ Sharley #
###############################################################################


#------------------------------------------------------------------------------
# Setup a default tasks.py for invoke
# Arguments: none;          			Return: none
__inv() {
    if [ ! -e "$(pwd)/tasks.py" ]; then
    	invoke --search-root="$HOME/.config/invoke" "$@"
    fi
}

#------------------------------------------------------------------------------
# Stop all docker containers, delete them and reclaim space.
# Arguments: none;          			Return: none
__docker_killall() {
    docker stop "$(docker ps -aq)" && docker rm "$(docker ps -aq)" && \
    docker system prune -a
}

#------------------------------------------------------------------------------
# git add all (modified and untracked) and commit
# Arguments: commit msg (optional);         	Return: none
__commit_all() {
    git add .; git commit -m "${1:-'auto commit'}"
}

#------------------------------------------------------------------------------
# DOTFILES - git add all (modified and untracked) and commit
# Arguments: commit msg (optional);	         	Return: none
__gcdot() {
    cd ~/.dotfiles || true
    commit_all "$@"
    cd - || true
}

#------------------------------------------------------------------------------
# venv and project scaffolding, python by default
# Arguments: $1=name, flag (-b) to switch from default lang     Return: none
mkp() {
    PROJECT_TYPE=PYTHON
    case "${1}" in
        -b | --bash)
            PROJECT_TYPE=BASH
            shift
            ;;
        -p | --python)
            shift
            ;;
        *)
            :
            ;;
    esac
    export PROJECT_TYPE
    mkproject "$@"
}

#------------------------------------------------------------------------------
# Create and activate a python virtual environment based on the cwd
# Arguments: none;          			Return: none
mkvenv() {
    virtualenv -p python3 "$(basename "$(pwd)")"
    source env/bin/activate
}

#------------------------------------------------------------------------------
# Add domain to hostname if not present
# Arguments: none;          Return: hostname
__check_fqdn() {
    pattern='^.*tsmetallic.com$'
    if [[ "$(hostname -f)" =~ $pattern ]]; then
        echo "$(hostname) correctly configured"
    else
        hostname "$(hostname).tsmetallic.com"
    fi
}

#------------------------------------------------------------------------------
# Add a new user is sudo group (debian)
# Arguments: username (default: ts);          Return: none
mkuser() {
    adduser --ingroup sudo --shell /bin/bash --verbose "${1:-ts}"
}

#------------------------------------------------------------------------------
# Display bash test operators
# Arguments: none;          Return: none
sts() {
	cat << 'EOF'

     ----------------------------------------------------
    |      Operator  -->  Description                    |
    |--------------  ---  -------------------------------|
    |        ! EXPR  -->  EXPR is false                  |
    |        -n STR  -->  length of STR is > 0           |
    |        -z STR  -->  length of STR is 0 (empty)     |
    |   STR1 = STR2  -->  STR1 is equal to STR2          |
    |  STR1 != STR2  -->  STR1 is not equal to STR2      |
    | INT1 -eq INT2  -->  INT1 is equal to INT2          |
    | INT1 -gt INT2  -->  INT1 is greater than INT2      |
    | INT1 -lt INT2  -->  INT1 is less than INT2         |
    |       -d FILE  -->  FILE exists and is a directory |
    |       -e FILE  -->  FILE exists                    |
    |       -r FILE  -->  FILE exists and is readable    |
    |       -s FILE  -->  FILE exists and is not empty   |
    |       -w FILE  -->  FILE exists and is writeable   |
    |       -x FILE  -->  FILE exists and is executable  |
     ----------------------------------------------------

  Ex: [ -d "${my_var}" ] && echo "${my_var}" is a directory!
      [ -n "$(ls ${my_var})" ] && echo ...and it\'s not empty!
EOF
}

#------------------------------------------------------------------------------
# Run all executable files in a directory
# Arguments: Path to dir;          Return: none
__run_scripts(){
  for script in "${1}"/*; do
    [ -x "${script}" ] || continue
    . "${script}"
  done
}

#------------------------------------------------------------------------------
# Reads a file and returns content of a secret to stdout
# Arguments: name of secret;          Return: prints to stdout
__get_secret() {
	local secret_file="$1"
    read -r secret < "${secret_file}"
    echo "${secret}"
}

#------------------------------------------------------------------------------
# Get last two sections of cwd
# Arguments: none;					          Return: none
__pwdtail () {
	pwd|awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

#------------------------------------------------------------------------------
# Display network config info
# Arguments: none;					          Return: none
__netinfo () {
	echo "--------------- Network Information ---------------"
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	echo ""
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	echo ""
	/sbin/ifconfig | awk /'inet addr/ {print $4}'

	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
	echo "---------------------------------------------------"
}

#------------------------------------------------------------------------------
# Start Uvicorn as a dev server watching $1 or default main.py
# Arguments: file to watch (optional);          Return: none
uc() {
	uvicorn "${1:-main}":app --reload
}

#------------------------------------------------------------------------------
# Common extract methods
# Arguments: target file;     			     Return: none
extract() {
	for arc in "$@"; do
		if [ -f "$arc" ] ; then
			case "$arc" in
				*.tar.bz2)   tar xvjf "$arc"             ;;
				*.tar.gz)    tar xvzf "$arc"             ;;
				*.bz2)       bunzip2 "$arc"              ;;
				*.rar)       rar x "$arc"                ;;
				*.gz)        gunzip "$arc"               ;;
				*.tar)       tar xvf "$arc"              ;;
				*.tbz2)      tar xvjf "$arc"             ;;
				*.tgz)       tar xvzf "$arc"             ;;
				*.zip)       unzip "$arc"                ;;
				*.Z)         uncompress "$arc"           ;;
				*.7z)        7z x "$arc"                 ;;
				*)           echo "'$arc':unkown type"   ;;
			esac
		else
			echo "'$arc': file not found or not valid"
		fi
	done
}

#------------------------------------------------------------------------------
# TMPNAME: Create a time-based name for a temp file or directory
# Arguments: $1='f' (file) or 'd' (dir)         Return: "tmp########"
tmpname() {
    str_time='tmp'"$(date +%s)"
    if [[ "$1" == '-d' ]]
    then
        mkdir -p "$str_time"
        echo "Created directory: $str_time"
    elif [[ "$1" == '-f' ]]
    then
        touch "$str_time"
        echo "Created file: $str_time"
    else
        return
    fi
}

#------------------------------------------------------------------------------
# GG (get git): clone a git hub repository and cd to it
# Arguments: $1 -> ghuser, ghrepo;      Return: none
__gg() {
    if [ $# == 2 ]; then
        ghuser=$1
        ghrepo=$2
    elif [ $# == 1 ]; then
        ghuser=tsharley
        ghrepo=$1
    else
        echo 1 or 2 arguments required
        return 1
    fi
	git clone https://github.com/"${ghuser}"/"${ghrepo}".git
	cd "${ghrepo}" || return
}

#------------------------------------------------------------------------------
# MCD: Make directory, including any intermediate directories, and cd to it
# Arguments: $1 -> dir name/path;        Return: 0
mcd() {
	mkdir -p "$1"
	cd "$1" || return
}

#------------------------------------------------------------------------------
# CMX: Make file executable
# Arguments: $1 -> filename;          Return: 0
cmx() {
    chmod +x "$1"
}

#------------------------------------------------------------------------------
# MACNST: (Mac Netstat) List listening ports on localhost
# Arguments: None;          Return: 0
__macstat() {
    netstat -Watnlv | grep LISTEN | awk '{"ps -o comm= -p " $9 | getline procname;colred="\033[01;31m";colclr="\033[0m"; print colred "proto: " colclr $1 colred " | addr.port: " colclr $4 colred " | pid: " colclr $9 colred " | name: " colclr procname;  }' | column -t -s "|"
}

#------------------------------------------------------------------------------
# PYSERV: Stand up a web server from the current dir, port optional
# Arguments: $1 -> port, default 8080;          Return: 0
__pyserv() {
    port=${1:-8080}
    python3 -m http.server "$port"
}


#------------------------------------------------------------------------------
# Load .env
# Arguments: none								  ;          Return: 0
__env() {
    # shellcheck source=/dev/null
    . ~/.config/secrets/.env
}

#------------------------------------------------------------------------------
# Web Page
# Arguments: path								  ;          Return: 0
__webpage() {
    
    target_path="${1:-.}"
    
    cat <<-EOF >> "${target_path}/index.html"
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="utf-8">
            <title>title</title>
            <link rel="stylesheet" href="https://unpkg.com/mvp.css"> 
        </head>
        <body>
            <!-- page content -->
        </body>
    </html>
	EOF
}

#------------------------------------------------------------------------------
# UP: cd up n levels
# Arguments: $1 -> levels (default=1);				         Return: 0
up(){
  if [[ "$#" -ne 1 ]]; then
    cd ..
  elif ! [[ $1 =~ ^[0-9]+$ ]]; then
    echo "Error: up should be called with the number of directories to go up. The default is 1."
  else
    local d=""
    limit=$1
    for ((i=1 ; i <= limit ; i++))
      do
        d=$d/..
      done
    d=$(echo $d | sed 's/^\///')
    cd "$d" || return
  fi
}

#------------------------------------------------------------------------------
# # Usage: get term size
# Arguments: flags -l (lines), -c (columns), -a (all);	   Return: {{ return }} 
__get_term_size() {
    shopt -s checkwinsize; (:;:) # (:;:) is a micro sleep to ensure export
	case "$1" in
		"-l")	printf '%s\n' "$LINES"			;;
		"-c")	printf '%s\n' "$COLUMNS"		;;
		*)		printf '%s\n' "$LINES $COLUMNS"	;;
	esac
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__get_cursor_pos() {
    # Usage: get_cursor_pos
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
    printf '%s\n' "$x $y"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__hex_to_rgb() {
    # Usage: hex_to_rgb "#FFFFFF"
    #        hex_to_rgb "000000"
    : "${1/\#}"
    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))
    printf '%s\n' "$r $g $b"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__rgb_to_hex() {
    # Usage: rgb_to_hex "r" "g" "b"
    printf '#%02x%02x%02x\n' "$1" "$2" "$3"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__progbar() {
    # Usage: bar 1 10
    #            ^----- Elapsed Percentage (0-100).
    #               ^-- Total length in chars.
    elapsed_percent="$1"
    ttl_len="$2"
    ((elapsed=elapsed_percent*ttl_len/100))

    # Create the bar with spaces.
    printf -v prog  "%${elapsed}s"
    printf -v total "%$(($2-elapsed))s"

    printf '%s\r' "[${prog// /-}${total}]"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__trim_string() {
    # Usage: trim_string "   example   string    "
    : "${1#"${1%%[![:space:]]*}"}"
    : "${_%"${_##*[![:space:]]}"}"
    printf '%s\n' "$_"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
__regex() {
    # Usage: regex "string" "regex"
    candidate_str="${1}"
    pattern="${2}"
    [[ "$candidate_str" =~ $pattern ]] && printf '%s\n' "${BASH_REMATCH[1]}"
}

#------------------------------------------------------------------------------
# Reads file and gets an array of lines between two designated markers 
# Arguments: marker_start marker_end;          Return: array of lines from file 
extract_lines() {
    # Usage: extract file "opening marker" "closing marker"
    while IFS=$'\n' read -r line; do
        [[ $extract && $line != "$3" ]] &&
            printf '%s\n' "$line"

        [[ $line == "$2" ]] && extract=1
        [[ $line == "$3" ]] && extract=
    done < "$1"
}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
#() {
	
#}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
#() {
	
#}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
#() {
	
#}

#------------------------------------------------------------------------------
# {{ name }}
# Arguments: {{ args }};          				Return: {{ return }} 
#() {
	
#}

